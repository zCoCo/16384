% Tests if the Gradient Descent Function can Successfully Solve IK for the
% Given Goal Positions %goals% from the Given Start Configurations %th0s%
% on a Serial Revolute Robot with the Given Numbers of Joints %ns%.
% Both inputs are lists (row vectors) of column vectors.
% Test Case:
% grad_test([2,3,3],[[pi/4;pi/2;0],[0;0;0],[0;0;0]],
 [[-sqrt(2);sqrt(2);0],[1.6;1.6;0],[1.6;1.6;pi/2]])
function works = grad_test(ns, th0s, goals)
    works = 1;
    i = 1;
    while(i < size(th0s,2))
        n = ns(i);
        robot = Robot(ones(n,1), ones(n,1), ones(n,1),1);
        ths = robot.ik(th0s(1:n,i), goals(1:n,i));
        pe = robot.ee(ths);
        
        works = works & prod(ferr(pe(1:n,i), goals(1:n,i)) < 0.05);
    i = i+1;
    end
end % #grad_test

% Returns the Error Fraction Between a,b (with respect to b)
function e = ferr(a,b)
    e = abs( (a-b) ./ b );
end % #ferr